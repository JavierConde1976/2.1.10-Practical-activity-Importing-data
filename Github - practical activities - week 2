{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ac3d735-1b82-428d-86e4-1d7d199416e5",
   "metadata": {},
   "source": [
    "PRACTICAL ACTIVITIES - week 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cefe4b36-6b34-42ea-9788-17063119acf5",
   "metadata": {},
   "source": [
    "2.1.3 Practical activity: Pandas Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4f61f64e-1d62-48b1-9549-e406b318a6d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import Pandas library\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be624ca0-8f5d-4b43-91d7-1a3efd58480d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0               Law Enforcement (123)\n",
      "1      Fire and Rescue Services (224)\n",
      "2    Emergency Medical Services (101)\n",
      "3          Emergency Management (999)\n",
      "4                  Public Works (900)\n",
      "dtype: object\n",
      "0      prevention\n",
      "1      mitigation\n",
      "2    preparedness\n",
      "3        response\n",
      "4        recovery\n",
      "dtype: object\n",
      "0          Check carotid pulse (neck)\n",
      "1                    breathing (nose)\n",
      "2    obstructions (nose, ears, mouth)\n",
      "3                 pupils (responsive)\n",
      "4                       consciousness\n",
      "5                     contact details\n",
      "6                           allergies\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "#we create 3 lists\n",
    "\n",
    "Emergency_numbers = pd.Series(['Law Enforcement (123)', 'Fire and Rescue Services (224)',\n",
    "                               'Emergency Medical Services (101)', 'Emergency Management (999)',\n",
    "                               'Public Works (900)'])\n",
    "Emergency_protocols = pd.Series(['prevention', 'mitigation', 'preparedness', 'response', 'recovery'])\n",
    "Emergency_checklist = pd.Series(['Check carotid pulse (neck)', 'breathing (nose)', 'obstructions (nose, ears, mouth)',\n",
    "                                 'pupils (responsive)', 'consciousness', 'contact details', 'allergies'])\n",
    "\n",
    "print(Emergency_numbers)\n",
    "print(Emergency_protocols)\n",
    "print(Emergency_checklist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fad6b3dc-c7e8-4558-bb81-712b6603401e",
   "metadata": {},
   "source": [
    "2.1.5 Practical activity: Pandas DataFrame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c37cac18-f3d6-47b4-ade8-a1627effe88e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Annual</th>\n",
       "      <th>Sick</th>\n",
       "      <th>Personal</th>\n",
       "      <th>Bonus</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personnel_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>Shen Lee</td>\n",
       "      <td>23</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Leon Buhle</td>\n",
       "      <td>20</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>Tracy Adams</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>Lebo Sinuka</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Lauren Pierce</td>\n",
       "      <td>21</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Monika Bond</td>\n",
       "      <td>21</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>Natahs Allsopp</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Nicholas Winter</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Christopher Eckson</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>Siobhan OMalley</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name  Annual  Sick  Personal  Bonus\n",
       "Personnel_ID                                                   \n",
       "215                     Shen Lee      23    10         5      3\n",
       "216                   Leon Buhle      20     8         4      0\n",
       "217                  Tracy Adams      15    10         5      0\n",
       "218                  Lebo Sinuka      19     9         0      3\n",
       "219                Lauren Pierce      21     7         5      3\n",
       "220                  Monika Bond      21    10         2      6\n",
       "221               Natahs Allsopp      10     9         5      0\n",
       "222              Nicholas Winter      15    10         4      3\n",
       "223           Christopher Eckson      16     8         2      6\n",
       "224              Siobhan OMalley      23     5         5      3"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Leave configuration\n",
    "# Import Pandas library\n",
    "import pandas as pd\n",
    "\n",
    "# Create a DataFrame from a dictionary\n",
    "data = {'Name': ['Shen Lee', 'Leon Buhle', 'Tracy Adams',\n",
    "                 'Lebo Sinuka', 'Lauren Pierce', 'Monika Bond',\n",
    "                 'Natahs Allsopp', 'Nicholas Winter',\n",
    "                 'Christopher Eckson', 'Siobhan OMalley'],\n",
    "        'Annual': [23, 20, 15, 19, 21, 21, 10, 15, 16, 23],\n",
    "        'Sick': [10, 8, 10, 9, 7, 10, 9, 10, 8, 5],\n",
    "        'Personal': [5, 4, 5, 0, 5, 2, 5, 4, 2, 5],\n",
    "        'Bonus': [3, 0, 0, 3, 3, 6, 0, 3, 6, 3]}\n",
    "row_labels = [215, 216, 217, 218, 219, 220, 221, 222, 223, 224]\n",
    "leave_cycle = pd.DataFrame(data, columns=['Name', 'Annual',\n",
    "                                          'Sick', 'Personal', 'Bonus'],\n",
    "                           index = row_labels)\n",
    "\n",
    "leave_cycle.index.name = 'Personnel_ID'\n",
    "\n",
    "# View the DataFrame\n",
    "leave_cycle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1950700-b551-4f81-a3f4-be6cdd3b2420",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a2bd48c3-3627-4994-8002-933368e215fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bf1a6a93-9759-4c09-96e0-8f571f68e2ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {'Name':['Shen Lee', 'Leon Buhle', 'Tracy Adams',\n",
    "                 'Lebo Sinuka', 'Lauren Pierce', 'Monika Bond',\n",
    "                 'Natahs Allsopp', 'Nicholas Winter',\n",
    "                 'Christopher Eckson', 'Siobhan OMalley'],\n",
    "        'Sick days':[10, 8, 10, 9, 7, 10, 9, 10, 8, 5],\n",
    "        'Annual leave':[23, 20, 15, 19, 21, 21, 10, 15, 16, 23],\n",
    "        'Personal':[5, 4, 5, 0, 5, 2, 5, 4, 2, 5],\n",
    "        'Bonus':[3, 0, 0, 3, 3, 6, 0, 3, 6, 3]}\n",
    "\n",
    "row_labels = [215, 216, 217, 218, 219, 220, 221, 222, 223, 224]\n",
    "leave_cycle = pd.DataFrame(data, columns = ['Name', 'Annual leave',\n",
    "                                            'Sick days', 'Personal', 'Bonus'],\n",
    "                           index = row_labels)\n",
    "\n",
    "leave_cycle.index.name = 'Personnel_ID'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1eb06ebf-44d2-4e38-9905-2661e7112bef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Annual leave</th>\n",
       "      <th>Sick days</th>\n",
       "      <th>Personal</th>\n",
       "      <th>Bonus</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personnel_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>Shen Lee</td>\n",
       "      <td>23</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Leon Buhle</td>\n",
       "      <td>20</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>Tracy Adams</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>Lebo Sinuka</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Lauren Pierce</td>\n",
       "      <td>21</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Monika Bond</td>\n",
       "      <td>21</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>Natahs Allsopp</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Nicholas Winter</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Christopher Eckson</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>Siobhan OMalley</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name  Annual leave  Sick days  Personal  Bonus\n",
       "Personnel_ID                                                              \n",
       "215                     Shen Lee            23         10         5      3\n",
       "216                   Leon Buhle            20          8         4      0\n",
       "217                  Tracy Adams            15         10         5      0\n",
       "218                  Lebo Sinuka            19          9         0      3\n",
       "219                Lauren Pierce            21          7         5      3\n",
       "220                  Monika Bond            21         10         2      6\n",
       "221               Natahs Allsopp            10          9         5      0\n",
       "222              Nicholas Winter            15         10         4      3\n",
       "223           Christopher Eckson            16          8         2      6\n",
       "224              Siobhan OMalley            23          5         5      3"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leave_cycle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb50d88-327b-427c-bc6b-838db784c598",
   "metadata": {},
   "source": [
    "2.1.10 Practical activity: Importing data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "63a1dd3d-3685-43f6-a223-5b2387c02fb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2ce44322-8771-4868-9059-87a5670b897a",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies = pd.read_excel('iCloud Drive (Archive) - 1/MY EDUCATION/LSE CAREER ACCELERATOR DATA ANALYTICS 2022/LSE - DATA ANALYSIS/movies.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "938faaf4-d421-40ec-8166-da5d12a67dc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Year</th>\n",
       "      <th>Age</th>\n",
       "      <th>IMDb</th>\n",
       "      <th>Rotten Tomatoes</th>\n",
       "      <th>Directors</th>\n",
       "      <th>Genres</th>\n",
       "      <th>Country</th>\n",
       "      <th>Language</th>\n",
       "      <th>Runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0.87</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>Action,Adventure,Sci-Fi,Thriller</td>\n",
       "      <td>United States,United Kingdom</td>\n",
       "      <td>English,Japanese,French</td>\n",
       "      <td>148.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Matrix</td>\n",
       "      <td>1999</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.7</td>\n",
       "      <td>0.87</td>\n",
       "      <td>Lana Wachowski,Lilly Wachowski</td>\n",
       "      <td>Action,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>2018</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.84</td>\n",
       "      <td>Anthony Russo,Joe Russo</td>\n",
       "      <td>Action,Adventure,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Back to the Future</td>\n",
       "      <td>1985</td>\n",
       "      <td>7+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.96</td>\n",
       "      <td>Robert Zemeckis</td>\n",
       "      <td>Adventure,Comedy,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>116.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Good, the Bad and the Ugly</td>\n",
       "      <td>1966</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0.97</td>\n",
       "      <td>Sergio Leone</td>\n",
       "      <td>Western</td>\n",
       "      <td>Italy,Spain,West Germany</td>\n",
       "      <td>Italian</td>\n",
       "      <td>161.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16739</th>\n",
       "      <td>The Ghosts of Buxley Hall</td>\n",
       "      <td>1980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bruce Bilson</td>\n",
       "      <td>Comedy,Family,Fantasy,Horror</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16740</th>\n",
       "      <td>The Poof Point</td>\n",
       "      <td>2001</td>\n",
       "      <td>7+</td>\n",
       "      <td>4.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Neal Israel</td>\n",
       "      <td>Comedy,Family,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16741</th>\n",
       "      <td>Sharks of Lost Island</td>\n",
       "      <td>2013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Neil Gelinas</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16742</th>\n",
       "      <td>Man Among Cheetahs</td>\n",
       "      <td>2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Richard Slater-Jones</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16743</th>\n",
       "      <td>In Beaver Valley</td>\n",
       "      <td>1950</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>James Algar</td>\n",
       "      <td>Documentary,Short,Family</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16744 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Title  Year  Age  IMDb  Rotten Tomatoes  \\\n",
       "0                           Inception  2010  13+   8.8             0.87   \n",
       "1                          The Matrix  1999  18+   8.7             0.87   \n",
       "2              Avengers: Infinity War  2018  13+   8.5             0.84   \n",
       "3                  Back to the Future  1985   7+   8.5             0.96   \n",
       "4      The Good, the Bad and the Ugly  1966  18+   8.8             0.97   \n",
       "...                               ...   ...  ...   ...              ...   \n",
       "16739       The Ghosts of Buxley Hall  1980  NaN   6.2              NaN   \n",
       "16740                  The Poof Point  2001   7+   4.7              NaN   \n",
       "16741           Sharks of Lost Island  2013  NaN   5.7              NaN   \n",
       "16742              Man Among Cheetahs  2017  NaN   6.6              NaN   \n",
       "16743                In Beaver Valley  1950  NaN   NaN              NaN   \n",
       "\n",
       "                            Directors                            Genres  \\\n",
       "0                   Christopher Nolan  Action,Adventure,Sci-Fi,Thriller   \n",
       "1      Lana Wachowski,Lilly Wachowski                     Action,Sci-Fi   \n",
       "2             Anthony Russo,Joe Russo           Action,Adventure,Sci-Fi   \n",
       "3                     Robert Zemeckis           Adventure,Comedy,Sci-Fi   \n",
       "4                        Sergio Leone                           Western   \n",
       "...                               ...                               ...   \n",
       "16739                    Bruce Bilson      Comedy,Family,Fantasy,Horror   \n",
       "16740                     Neal Israel              Comedy,Family,Sci-Fi   \n",
       "16741                    Neil Gelinas                       Documentary   \n",
       "16742            Richard Slater-Jones                       Documentary   \n",
       "16743                     James Algar          Documentary,Short,Family   \n",
       "\n",
       "                            Country                 Language  Runtime  \n",
       "0      United States,United Kingdom  English,Japanese,French    148.0  \n",
       "1                     United States                  English    136.0  \n",
       "2                     United States                  English    149.0  \n",
       "3                     United States                  English    116.0  \n",
       "4          Italy,Spain,West Germany                  Italian    161.0  \n",
       "...                             ...                      ...      ...  \n",
       "16739                 United States                  English    120.0  \n",
       "16740                 United States                  English     90.0  \n",
       "16741                 United States                  English      NaN  \n",
       "16742                 United States                  English      NaN  \n",
       "16743                 United States                  English     32.0  \n",
       "\n",
       "[16744 rows x 10 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "77e137b3-3f12-4aba-8cf7-858aea0d3916",
   "metadata": {},
   "outputs": [],
   "source": [
    "ott = pd.read_csv('iCloud Drive (Archive) - 1/MY EDUCATION/LSE CAREER ACCELERATOR DATA ANALYTICS 2022/LSE - DATA ANALYSIS/ott.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dae94af0-d089-4e71-9d3f-76049d260740",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Netflix</th>\n",
       "      <th>Hulu</th>\n",
       "      <th>Prime Video</th>\n",
       "      <th>Disney+</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16739</th>\n",
       "      <td>16740</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16740</th>\n",
       "      <td>16741</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16741</th>\n",
       "      <td>16742</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16742</th>\n",
       "      <td>16743</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16743</th>\n",
       "      <td>16744</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16744 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID  Netflix  Hulu  Prime Video  Disney+\n",
       "0          1        0     0            1        0\n",
       "1          2        0     1            0        0\n",
       "2          3        0     0            1        0\n",
       "3          4        1     0            0        0\n",
       "4          5        0     0            1        0\n",
       "...      ...      ...   ...          ...      ...\n",
       "16739  16740        0     0            1        0\n",
       "16740  16741        0     0            1        0\n",
       "16741  16742        0     0            1        0\n",
       "16742  16743        0     0            1        0\n",
       "16743  16744        1     0            0        0\n",
       "\n",
       "[16744 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ott"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a4d0d01c-3b11-498f-845a-3fb2e5682289",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            Title  Year  Age  IMDb  Rotten Tomatoes  \\\n",
      "0                       Inception  2010  13+   8.8             0.87   \n",
      "1                      The Matrix  1999  18+   8.7             0.87   \n",
      "2          Avengers: Infinity War  2018  13+   8.5             0.84   \n",
      "3              Back to the Future  1985   7+   8.5             0.96   \n",
      "4  The Good, the Bad and the Ugly  1966  18+   8.8             0.97   \n",
      "\n",
      "                        Directors                            Genres  \\\n",
      "0               Christopher Nolan  Action,Adventure,Sci-Fi,Thriller   \n",
      "1  Lana Wachowski,Lilly Wachowski                     Action,Sci-Fi   \n",
      "2         Anthony Russo,Joe Russo           Action,Adventure,Sci-Fi   \n",
      "3                 Robert Zemeckis           Adventure,Comedy,Sci-Fi   \n",
      "4                    Sergio Leone                           Western   \n",
      "\n",
      "                        Country                 Language  Runtime  \n",
      "0  United States,United Kingdom  English,Japanese,French    148.0  \n",
      "1                 United States                  English    136.0  \n",
      "2                 United States                  English    149.0  \n",
      "3                 United States                  English    116.0  \n",
      "4      Italy,Spain,West Germany                  Italian    161.0  \n"
     ]
    }
   ],
   "source": [
    "print(movies.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "50998085-f0c6-4786-abc0-3b0e2c982707",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Title  Year  Age  IMDb  Rotten Tomatoes  \\\n",
      "16739  The Ghosts of Buxley Hall  1980  NaN   6.2              NaN   \n",
      "16740             The Poof Point  2001   7+   4.7              NaN   \n",
      "16741      Sharks of Lost Island  2013  NaN   5.7              NaN   \n",
      "16742         Man Among Cheetahs  2017  NaN   6.6              NaN   \n",
      "16743           In Beaver Valley  1950  NaN   NaN              NaN   \n",
      "\n",
      "                  Directors                        Genres        Country  \\\n",
      "16739          Bruce Bilson  Comedy,Family,Fantasy,Horror  United States   \n",
      "16740           Neal Israel          Comedy,Family,Sci-Fi  United States   \n",
      "16741          Neil Gelinas                   Documentary  United States   \n",
      "16742  Richard Slater-Jones                   Documentary  United States   \n",
      "16743           James Algar      Documentary,Short,Family  United States   \n",
      "\n",
      "      Language  Runtime  \n",
      "16739  English    120.0  \n",
      "16740  English     90.0  \n",
      "16741  English      NaN  \n",
      "16742  English      NaN  \n",
      "16743  English     32.0  \n"
     ]
    }
   ],
   "source": [
    "print(movies.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3cef09a8-f1ef-4f57-92f1-6a56fedbdab2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16744, 10)\n"
     ]
    }
   ],
   "source": [
    "print(movies.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d6c81e77-b379-404a-911f-76d8d6cc9cea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID  Netflix  Hulu  Prime Video  Disney+\n",
      "0   1        0     0            1        0\n",
      "1   2        0     1            0        0\n",
      "2   3        0     0            1        0\n",
      "3   4        1     0            0        0\n",
      "4   5        0     0            1        0\n"
     ]
    }
   ],
   "source": [
    "print(ott.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "358ba55c-87cc-42b7-ac97-98a65bf28a7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          ID  Netflix  Hulu  Prime Video  Disney+\n",
      "16739  16740        0     0            1        0\n",
      "16740  16741        0     0            1        0\n",
      "16741  16742        0     0            1        0\n",
      "16742  16743        0     0            1        0\n",
      "16743  16744        1     0            0        0\n"
     ]
    }
   ],
   "source": [
    "print(ott.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5b29ae68-aa17-4ac3-90f7-c1722d9e8654",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16744, 5)\n"
     ]
    }
   ],
   "source": [
    "print(ott.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "30d9972f-e583-45f6-b2d5-f356729790d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID             int64\n",
       "Netflix        int64\n",
       "Hulu           int64\n",
       "Prime Video    int64\n",
       "Disney+        int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ott.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6cba4b94-d27c-493a-889b-7f48d74e3e0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Title               object\n",
       "Year                 int64\n",
       "Age                 object\n",
       "IMDb               float64\n",
       "Rotten Tomatoes    float64\n",
       "Directors           object\n",
       "Genres              object\n",
       "Country             object\n",
       "Language            object\n",
       "Runtime            float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6c9be19-1dc9-41d0-9a8c-d502d4f85e3a",
   "metadata": {},
   "source": [
    "2.2.3 Practical activity: Create a DataFrame from the dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "56756c97-72c1-4dda-b671-4deb8f63aede",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "db685992-6e4b-4854-af1d-0a4141cb88b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "brazil = {'States': ['Acre', 'Alogoas', 'Amapa', 'Amazonas', 'Bahia', 'Ceara', 'Distrito Federal',\n",
    "                     'Espirito Santo', 'Goiás', 'Maranhao', 'Mato grosso', 'Mato grosso do sul', \n",
    "                     'Minas gerais', 'Para', 'Paraiba', 'Parana', 'Pernambuco', 'Piaui', 'Rio de Janeiro', \n",
    "                     'Rio Grande do norte', 'Rio Grande do Sul', 'Rondonia', 'Roraima', 'Santa Catarina', \n",
    "                     'Sao Paulo', 'Sergipe', 'Tocantins'],\n",
    "          'Capitals': ['Rio Branco', 'Maceió', 'Macapá', 'Manaus', 'Salvador', 'Fortaleza', 'Brasília', 'Vitória', 'Goiânia', 'São Luís', 'Cuiabá', 'Campo Grande','Belo Horizonte', 'Belém',\n",
    "                       'João Pessoa', 'Curitiba', 'Recife', 'Teresina', 'Rio de Janeiro', 'Natal', 'Porto Alegre', \n",
    "                       'Porto Velho', 'Boa Vista', 'Florianópolis', 'São Paulo', 'Aracaju', 'Palmas'],\n",
    "         }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0910a485-c439-40f2-8c4c-dfb662d354bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'States': ['Acre', 'Alogoas', 'Amapa', 'Amazonas', 'Bahia', 'Ceara', 'Distrito Federal', 'Espirito Santo', 'Goiás', 'Maranhao', 'Mato grosso', 'Mato grosso do sul', 'Minas gerais', 'Para', 'Paraiba', 'Parana', 'Pernambuco', 'Piaui', 'Rio de Janeiro', 'Rio Grande do norte', 'Rio Grande do Sul', 'Rondonia', 'Roraima', 'Santa Catarina', 'Sao Paulo', 'Sergipe', 'Tocantins'], 'Capitals': ['Vitória', 'Goiânia', 'São Luís', 'Cuiabá', 'Campo Grande', 'Belo Horizonte', 'Belém', 'João Pessoa', 'Curitiba', 'Recife', 'Teresina', 'Rio de Janeiro', 'Natal', 'Porto Alegre', 'Porto Velho', 'Boa Vista', 'Florianópolis', 'São Paulo', 'Aracaju', 'Palmas']}\n"
     ]
    }
   ],
   "source": [
    "print(brazil)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e00de9e5-5c69-45c6-bc2f-cc68903e2df3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a dictionary\n",
    "Brazil = {'States': ['Acre', 'Alogoas', 'Amapa', 'Amazonas', \n",
    "                     'Bahia', 'Ceara', 'Distrito Federal', \n",
    "                     'Espirito Santo', 'Goiás', 'Maranhao', \n",
    "                     'Mato grosso', 'Mato grosso do sul', \n",
    "                     'Minas gerais', 'Para', 'Paraiba', \n",
    "                     'Parana', 'Pernambuco', 'Piaui', \n",
    "                     'Rio de Janeiro', 'Rio Grande do norte', \n",
    "                     'Rio Grande do Sul', 'Rondonia', 'Roraima', \n",
    "                     'Santa Catarina', 'Sao Paulo', 'Sergipe', 'Tocantins'],\n",
    "          'Capitals': ['Rio Branco', 'Maceió', 'Macapá', 'Manaus', \n",
    "                     'Salvador', 'Fortaleza', 'Brasília', 'Vitória',\n",
    "                     'Goiânia', 'São Luís', 'Cuiabá', 'Campo Grande',\n",
    "                     'Belo Horizonte', 'Belém', 'João Pessoa', 'Curitiba', \n",
    "                     'Recife', 'Teresina', 'Rio de Janeiro', 'Natal', \n",
    "                     'Porto Alegre', 'Porto Velho', 'Boa Vista', \n",
    "                     'Florianópolis', 'São Paulo', 'Aracaju', 'Palmas']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5eec64a5-5c8e-4d91-af01-1421d50129ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "Brazil_fires = pd.DataFrame(Brazil)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1c433340-c684-473d-8160-14d40b1abf1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>States</th>\n",
       "      <th>Capitals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Acre</td>\n",
       "      <td>Rio Branco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alogoas</td>\n",
       "      <td>Maceió</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Amapa</td>\n",
       "      <td>Macapá</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Amazonas</td>\n",
       "      <td>Manaus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bahia</td>\n",
       "      <td>Salvador</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Ceara</td>\n",
       "      <td>Fortaleza</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Distrito Federal</td>\n",
       "      <td>Brasília</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Espirito Santo</td>\n",
       "      <td>Vitória</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Goiás</td>\n",
       "      <td>Goiânia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Maranhao</td>\n",
       "      <td>São Luís</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Mato grosso</td>\n",
       "      <td>Cuiabá</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Mato grosso do sul</td>\n",
       "      <td>Campo Grande</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Minas gerais</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Para</td>\n",
       "      <td>Belém</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Paraiba</td>\n",
       "      <td>João Pessoa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Parana</td>\n",
       "      <td>Curitiba</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Pernambuco</td>\n",
       "      <td>Recife</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Piaui</td>\n",
       "      <td>Teresina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Rio Grande do norte</td>\n",
       "      <td>Natal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Rio Grande do Sul</td>\n",
       "      <td>Porto Alegre</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Rondonia</td>\n",
       "      <td>Porto Velho</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Roraima</td>\n",
       "      <td>Boa Vista</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Santa Catarina</td>\n",
       "      <td>Florianópolis</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Sao Paulo</td>\n",
       "      <td>São Paulo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Sergipe</td>\n",
       "      <td>Aracaju</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Tocantins</td>\n",
       "      <td>Palmas</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 States        Capitals\n",
       "0                  Acre      Rio Branco\n",
       "1               Alogoas          Maceió\n",
       "2                 Amapa          Macapá\n",
       "3              Amazonas          Manaus\n",
       "4                 Bahia        Salvador\n",
       "5                 Ceara       Fortaleza\n",
       "6      Distrito Federal        Brasília\n",
       "7        Espirito Santo         Vitória\n",
       "8                 Goiás         Goiânia\n",
       "9              Maranhao        São Luís\n",
       "10          Mato grosso          Cuiabá\n",
       "11   Mato grosso do sul    Campo Grande\n",
       "12         Minas gerais  Belo Horizonte\n",
       "13                 Para           Belém\n",
       "14              Paraiba     João Pessoa\n",
       "15               Parana        Curitiba\n",
       "16           Pernambuco          Recife\n",
       "17                Piaui        Teresina\n",
       "18       Rio de Janeiro  Rio de Janeiro\n",
       "19  Rio Grande do norte           Natal\n",
       "20    Rio Grande do Sul    Porto Alegre\n",
       "21             Rondonia     Porto Velho\n",
       "22              Roraima       Boa Vista\n",
       "23       Santa Catarina   Florianópolis\n",
       "24            Sao Paulo       São Paulo\n",
       "25              Sergipe         Aracaju\n",
       "26            Tocantins          Palmas"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Brazil_fires"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5e62943c-b4ba-4a88-8695-546b9b85a3d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "brazil_fires = pd.DataFrame(brazil)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "bc07921a-2a4e-42fd-96f2-efcfeefb8cf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "brazil2 = {'States': [' ', ' '],\n",
    "           'Capitals': [' ', ' ']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2ab0930f-9029-4459-9fa3-1da263bb9610",
   "metadata": {},
   "outputs": [],
   "source": [
    "brazil_fires2 = pd.DataFrame(brazil2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ea52068d-77ef-46c9-a70b-351b17cda588",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>States</th>\n",
       "      <th>Capitals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  States Capitals\n",
       "0                \n",
       "1                "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brazil_fires2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d6f5504b-f82c-422a-873a-4c00b3483c65",
   "metadata": {},
   "outputs": [],
   "source": [
    "brazil_fires_final = brazil_fires.append(brazil_fires2, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e1b4e6ca-ff1c-49af-a2bc-9b2b7b8c15db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>States</th>\n",
       "      <th>Capitals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Acre</td>\n",
       "      <td>Rio Branco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alogoas</td>\n",
       "      <td>Maceió</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Amapa</td>\n",
       "      <td>Macapá</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Amazonas</td>\n",
       "      <td>Manaus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bahia</td>\n",
       "      <td>Salvador</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Ceara</td>\n",
       "      <td>Fortaleza</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Distrito Federal</td>\n",
       "      <td>Brasília</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Espirito Santo</td>\n",
       "      <td>Vitória</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Goiás</td>\n",
       "      <td>Goiânia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Maranhao</td>\n",
       "      <td>São Luís</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Mato grosso</td>\n",
       "      <td>Cuiabá</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Mato grosso do sul</td>\n",
       "      <td>Campo Grande</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Minas gerais</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Para</td>\n",
       "      <td>Belém</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Paraiba</td>\n",
       "      <td>João Pessoa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Parana</td>\n",
       "      <td>Curitiba</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Pernambuco</td>\n",
       "      <td>Recife</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Piaui</td>\n",
       "      <td>Teresina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Rio Grande do norte</td>\n",
       "      <td>Natal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Rio Grande do Sul</td>\n",
       "      <td>Porto Alegre</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Rondonia</td>\n",
       "      <td>Porto Velho</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Roraima</td>\n",
       "      <td>Boa Vista</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Santa Catarina</td>\n",
       "      <td>Florianópolis</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Sao Paulo</td>\n",
       "      <td>São Paulo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Sergipe</td>\n",
       "      <td>Aracaju</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Tocantins</td>\n",
       "      <td>Palmas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 States        Capitals\n",
       "0                  Acre      Rio Branco\n",
       "1               Alogoas          Maceió\n",
       "2                 Amapa          Macapá\n",
       "3              Amazonas          Manaus\n",
       "4                 Bahia        Salvador\n",
       "5                 Ceara       Fortaleza\n",
       "6      Distrito Federal        Brasília\n",
       "7        Espirito Santo         Vitória\n",
       "8                 Goiás         Goiânia\n",
       "9              Maranhao        São Luís\n",
       "10          Mato grosso          Cuiabá\n",
       "11   Mato grosso do sul    Campo Grande\n",
       "12         Minas gerais  Belo Horizonte\n",
       "13                 Para           Belém\n",
       "14              Paraiba     João Pessoa\n",
       "15               Parana        Curitiba\n",
       "16           Pernambuco          Recife\n",
       "17                Piaui        Teresina\n",
       "18       Rio de Janeiro  Rio de Janeiro\n",
       "19  Rio Grande do norte           Natal\n",
       "20    Rio Grande do Sul    Porto Alegre\n",
       "21             Rondonia     Porto Velho\n",
       "22              Roraima       Boa Vista\n",
       "23       Santa Catarina   Florianópolis\n",
       "24            Sao Paulo       São Paulo\n",
       "25              Sergipe         Aracaju\n",
       "26            Tocantins          Palmas\n",
       "27                                     \n",
       "28                                     "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brazil_fires_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59b446ca-1359-440b-a074-feabbb746b54",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
